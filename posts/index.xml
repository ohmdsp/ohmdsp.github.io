<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on OhmDSP Site</title><link>https://ohmdsp.github.io/posts/</link><description>Recent content in Posts on OhmDSP Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 21 Jun 2023 19:57:40 +0800</lastBuildDate><atom:link href="https://ohmdsp.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Video Post View</title><link>https://ohmdsp.github.io/video-post-view/</link><pubDate>Sat, 09 Jul 2022 23:08:01 +0200</pubDate><guid>https://ohmdsp.github.io/video-post-view/</guid><description>This is a video post view example.
Do you, like me, find yourself stuck at home these days and are looking to learn something new? Then come with me to learn 3D modeling with Solidworks. While you learn 3D modeling, I learn how to record and edit small video tutorials. As you can see, it is still an equal exchange. To record the screen I am using OBS and to edit the videos I am familiarazing with DaVinci Resolve.</description></item><item><title>Markdown Syntax</title><link>https://ohmdsp.github.io/markdown-syntax/</link><pubDate>Sun, 01 Dec 2019 21:57:40 +0800</pubDate><guid>https://ohmdsp.github.io/markdown-syntax/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files.&lt;/p></description></item><item><title>Intuitive Derivations in DSP</title><link>https://ohmdsp.github.io/intuitive-derivations-in-dsp/</link><pubDate>Wed, 21 Jun 2023 19:57:40 +0800</pubDate><guid>https://ohmdsp.github.io/intuitive-derivations-in-dsp/</guid><description>One of the most important concepts in digital signal processing is that a Linear-Time-Invariant (LTI) system is completely characterized in the time-domain by the output response to a unit impulse input. This can be imagined as probing the input of an LTI system with a Kronecker delta function and then determining the resulting output. $$ \delta[n] \rightarrow \boxed{LTI} \rightarrow h[n] $$
In this simple diagram, the output function $h[n]$ is called the &amp;ldquo;impulse response&amp;rdquo; of the system.</description></item><item><title>Time-Frequency Analysis of Non-Stationary Signals</title><link>https://ohmdsp.github.io/time-frequency-analysis-of-non-stationary-signals/</link><pubDate>Thu, 19 Jan 2023 19:57:40 +0800</pubDate><guid>https://ohmdsp.github.io/time-frequency-analysis-of-non-stationary-signals/</guid><description>Check out the Matlab demo code to explore time-frequency analysis using a Bat signal&amp;hellip;not the super-hero one.
Often, the examples provided in our signal processing textbooks assume that the signal we are working with is wide-sense-stationary. This means that the first and second order statistics (mean and correlation) do not change with shifts in time. Although, all of our statistical signal processing techniques depend upon this statistical behavior in order to produce meaningful characterizations when analyzing a random signal, many real-world signals don&amp;rsquo;t have nonstationary characteristics.</description></item><item><title>Complex Envelope</title><link>https://ohmdsp.github.io/complex-envelope/</link><pubDate>Sat, 16 Jul 2022 19:57:40 +0800</pubDate><guid>https://ohmdsp.github.io/complex-envelope/</guid><description>There are two common methods in the literature for mathematically describing narrowband signals. Both of these methods will be encountered in the popular signal processing, digital communications, and radar signal processing books. First approach: Let&amp;rsquo;s start with a simple real-valued sinusoidal signal with a time-dependent amplitude and phase. This can be expressed by
$$ x_{c}(t) = a(t)cos(2\pi f_{0} t + \theta(t) ) .$$
We can rewrite this expression using Eulers Formula to be</description></item><item><title>Fast Correlation</title><link>https://ohmdsp.github.io/fast-correlation/</link><pubDate>Sat, 16 Jul 2022 19:57:40 +0800</pubDate><guid>https://ohmdsp.github.io/fast-correlation/</guid><description>There are two methods for computing the correlation of complex-valued signals. The first one is a time-domain method, and for a stationary process can be computed using the following formula
$$ r_{xh}(k) = \begin{cases} \frac{1}{N} \sum^{N-k-1}{n=0} x(n+k)h^{}(n) &amp;amp; 0 \leq k \leq N-1 \ r^{}{xh}(-k) &amp;amp; -(N-1) \leq k \lt 0\ 0 &amp;amp; elsewhere\ \end{cases} $$
where N is the input data record length, x(n) is the input data and h(n) is the kernel, or reference data.</description></item><item><title>Fun Physics and Engineering Videos</title><link>https://ohmdsp.github.io/fun-physics-and-engineering-videos/</link><pubDate>Sat, 16 Jul 2022 19:57:40 +0800</pubDate><guid>https://ohmdsp.github.io/fun-physics-and-engineering-videos/</guid><description>Grain Bins and Soy Bean Farming
Heard Immunity (Sabine H. has become one of my favorite physics channels)
Maxwells Demon
Arrow of Time
Maxwells Demon - Relativity
General Thermodynamics (Watch at 2X speed)
Carno Cycle
Quantum Tunneling
Bose Einstein Condensation
Quantum Signal Processing
Torque and Gyroscopic Motion</description></item><item><title>My Reading Recommendations</title><link>https://ohmdsp.github.io/my-reading-recommendations/</link><pubDate>Sat, 16 Jul 2022 19:57:40 +0800</pubDate><guid>https://ohmdsp.github.io/my-reading-recommendations/</guid><description>This is my list of reading suggestions based on what I have found educational and enjoyable. I will continue to update the list as I discover more treasures. Warning: I primarily like to read non-fiction.
1. Seven Brief Lessons on Physics, by Carlo Rovelli This is a well-written book that is both educational and enjoyable. It is a short book, so it can be read in a weekend. I highly recommend it for anyone interested in modern physics.</description></item><item><title>Code Sample</title><link>https://ohmdsp.github.io/code-sample/</link><pubDate>Fri, 24 Jun 2022 18:28:32 +0200</pubDate><guid>https://ohmdsp.github.io/code-sample/</guid><description>&lt;p>The following are two code samples using syntax highlighting.&lt;/p></description></item><item><title>Deep Learning with Radio Frequency Signals Part I</title><link>https://ohmdsp.github.io/deep-learning-with-radio-frequency-signals-part-i/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ohmdsp.github.io/deep-learning-with-radio-frequency-signals-part-i/</guid><description>Signal Classification Using Spectrograms and Deep Learning
In this post, I will introduce some basic methods for utilizing a Convolutional Neural Network (CNN) to process spectrograms created from Radio Frequency (RF) data. The information in the post was taken from a tutorial my colleagues and I provided to NVidia Corporation in early 2015 that has been used in their enterprise training series for several years. This post links you to a git project that removes the dependency on Nvidia&amp;rsquo;s DIGITS platform and uses only Keras and Tensorflow.</description></item></channel></rss>